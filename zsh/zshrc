export PATH=${HOME}/anaconda/bin:${HOME}/.bin:${HOME}/.cabal/bin:/usr/local/bin:${PATH}:${HOME}/bin
fpath=($HOME/.zsh/func $HOME/.zsh/completion $fpath)
typeset -U fpath

# Disable Ctrl-s freezing the terminal
stty stop undef

autoload -U compinit
compinit

autoload -U bashcompinit

# Emacs keybindings
bindkey -e
bindkey "^R" history-incremental-search-backward

# Set up editor in command line
autoload edit-command-line
zle -N edit-command-line
bindkey '^Xe' edit-command-line

autoload -U colors
colors

setopt interactivecomments
setopt rmstarsilent
setopt prompt_subst
setopt inc_append_history
setopt share_history
unsetopt auto_pushd

# Only unique history entries in the reverse history search HIST_FIND_NO_DUPS=1
setopt hist_ignore_all_dups
setopt hist_ignore_dups


# Ignore duplicate history entries
zstyle ':completion:*:history-words' stop yes
zstyle ':completion:*:history-words' remove-all-dups yes
zstyle ':completion:*:history-words' list false
zstyle ':completion:*:history-words' menu yes

# Speed up completion
zstyle ':completion:*' accept-exact '*(N)'

# Use a cache for completion
zstyle ':completion:*' use-cache on


HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000

alias tmux='tmux -2'

# Function to attach to a session. If the session is not specified then
#just run `tmux attach`, otherwise add a -t flag
function _tmux_attach() {
    if [ $1 ]; then
        tmux attach -t $1
    else
        tmux attach
    fi
}

# Function to read man pages
function vman() {
    vim \
        -c "source \$VIMRUNTIME/ftplugin/man.vim" \
        -c "Man $*" \
        -c "set number relativenumber readonly|only"
}

# From GRB
function mcd() { mkdir -p $1 && cd $1 }

# Alias some tmux commands
alias ta=_tmux_attach
alias tns="tmux new-session -As"
alias tls="tmux ls"
alias m=make
alias lsc='ls --color=auto'
alias ll='ls -lh'
alias lr='ls -thor'

# Function to make a new tmux session at a variable location
function tnew() {
    if [[ $# -gt 0 ]]; then
        if [[ $# -gt 1 ]]; then
            return
        fi

        DIRNAME="$1"
        if [[ ! -d ${DIRNAME} ]]; then
            mkdir ${DIRNAME}
        fi

    else
        DIRNAME=$(pwd)
    fi

    cd $DIRNAME
    TMUXNAME=$(basename `pwd`)
    tns ${TMUXNAME}

}

fancy-ctrl-z () {
    if [[ $#BUFFER -eq 0 ]]; then
        BUFFER="fg"
        zle accept-line
    else
        zleush-input
        zle clear-screen
    fi
}
zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z

# Run irssi with the correct TERM variable
alias irssi="TERM=screen-256color irssi"

export GOPATH=${HOME}/Development/gocode

export EDITOR=vim
export VISUAL=${EDITOR}
export BIBINPUTS=${HOME}/work/central-bibliography:${BIBINPUTS}
export LESS='-FXR'

# Taken from grb's zshrc

# By default, zsh considers many characters part of a word (e.g., _ and -).
# Narrow that down to allow easier skipping through words via M-f and M-b.
export WORDCHARS='*?[]~&;!$%^<>'

alias ipy=ipython
alias ipysh='ipython --profile=sh'
alias p=python
alias py=python
alias pydoc='=python -m pydoc'
alias pylab='ipython --profile=pylab'
alias clear-pycs='find ${PWD} -name "*.pyc" -delete'
alias g='git'
alias gst='=git st'
alias es='exec $SHELL'
alias v=vim

function conda_local() {
    conda create --yes -p ${PWD}/venv pip pytest ipython numpy matplotlib scipy pandas $* && source activate ./venv
}

# SSH into the ngts ops machine, allowing for custom ssh arguments
function ngtshead() {
    ssh -t ngtshead.astro $@ exec zsh
}
alias ng=ngtshead

# Ruby aliases
alias bcb='bundle check; bundle install --binstubs .bundle/bin'
alias be='bundle exec'

export BUILD_PREFIX="${HOME}/.local"
export MANPATH=${BUILD_PREFIX}/share/man:${MANPATH}
export PATH=${BUILD_PREFIX}/bin:${PATH}

case $OSTYPE in
    linux*)
        export BROWSER=firefox
        export PATH=${PATH}:${HOME}/.gem/ruby/1.8/bin
        export LD_LIBRARY_PATH=${BUILD_PREFIX}/lib:${LD_LIBRARY_PATH}
        export PKG_CONFIG_PATH=${BUILD_PREFIX}/lib/pkgconfig:${PKG_CONFIG_PATH}
        export LS_OPTIONS=--color=never

        # Set up the module command
        function module() { eval `modulecmd zsh $*`; }

        export work=${HOME}/work/
        alias open='xdg-open 2>/dev/null'

        alias configurevim='./configure --prefix=$BUILD_PREFIX --with-features=huge --enable-pythoninterp --with-compiledby="Simon Walker" --disable-gui --without-x'


        ;;
    darwin*)
        export PATH=$(brew --prefix gnu-tar)/libexec/gnubin:$(brew --prefix coreutils)/libexec/gnubin:/usr/texbin:${GOPATH}/bin:/usr/local/sbin:/sbin:/usr/sbin:${HOME}/.cabal/bin:${PATH}
        alias gvim=mvim
        alias gview=mview
        alias -g awk=gawk

        if [[ "$(hostname -s)" == "mbp15" ]]; then
            export work=${HOME}/work
        else
            export work=${HOME}/work/Warwick/PostDoc/
        fi


        # Configure chruby
        source /usr/local/opt/chruby/share/chruby/chruby.sh

        # Set up online help
        unalias run-help
        autoload run-help
        HELPDIR=/usr/local/share/zsh/helpfiles
        ;;
esac

export WASP="${work}/WASP"
export NGTS="${work}/NGTS"
alias work="cd ${work} && pwd && ls"
alias ngts="cd ${NGTS} && pwd && ls"
alias wasp="cd ${WASP} && pwd && ls"
alias dotfiles="cd ${HOME}/dotfiles && pwd"
alias dev="cd ${HOME}/Development && pwd && ls"
alias de='direnv edit .'
alias da='direnv allow'
alias dr='direnv reload'

function init-python() {
    local readonly fname="$1"
    # Remove the filename from the arugment list
    shift
    cat >${fname} <<EOL
#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import division, print_function, absolute_import
import argparse
import logging

logging.basicConfig(
    level='DEBUG', format='%(asctime)s|%(name)s|%(levelname)s|%(message)s')
logger = logging.getLogger(__name__)


def main(args):
    logger.debug(args)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    main(parser.parse_args())
EOL
    chmod +x ${fname}
    \vim ${fname} "${@}"
}

function init-3() {
    echo "use conda 3" >> .envrc && direnv allow && init-python ./main.py +qa
}

function init-2() {
    echo "use conda 2" >> .envrc && direnv allow && init-python ./main.py +qa
}

# Source the custom zshrc.local file in the system
if [[ -f ${HOME}/.zshrc.local ]]; then
    source ${HOME}/.zshrc.local
fi

# Setup direnv
_direnv_hook() {
  eval "$(direnv export zsh)";
}
typeset -a precmd_functions
if [[ -z $precmd_functions[(r)_direnv_hook] ]]; then
  precmd_functions+=_direnv_hook;
fi


# Setup hub
alias git=hub
if type compdef > /dev/null; then
      compdef hub=git
fi

# Finally source the theme
source ${HOME}/.zsh/srwalker101.zsh-theme
