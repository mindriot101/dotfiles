#!/usr/bin/env python3.6


import argparse
import shutil
import subprocess as sp
import pathlib
import sys
import os
from contextlib import contextmanager


@contextmanager
def change_dir(path):
    old = os.getcwd()
    try:
        os.chdir(path)
        yield
    finally:
        os.chdir(old)


def main(args):
    if not args.path.is_dir():
        print(f'Path {args.path} does not exist', file=sys.stderr)
        sys.exit(1)

    newpath = args.path / f'{args.name}.git'
    if newpath.is_dir():
        if not args.force:
            print(f'Repo {newpath} exists. Use -f/--force to overwrite',
                    file=sys.stderr)
            sys.exit(1)
        else:
            shutil.rmtree(newpath)

    newpath.mkdir()

    with change_dir(newpath):
        sp.check_call(['git', 'init', '--bare'], stdout=sp.PIPE, stderr=sp.PIPE)

    if args.no_add_origin:
        print(newpath)
    else:
        sp.check_call(['git', 'remote', 'add', 'origin', newpath])
        print(f'Set up new remote `origin`')



if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('name')
    parser.add_argument('-p', '--path', required=False,
            default=pathlib.Path('/', 'Volumes', 'PORTABLE', 'gitrepos'))
    parser.add_argument('-f', '--force', required=False, action='store_true',
            default=False)
    parser.add_argument('--no-add-origin', action='store_true',
            default=False)
    main(parser.parse_args())
