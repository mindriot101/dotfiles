#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import division, print_function, absolute_import
import argparse
from xml.dom.minidom import parseString
import subprocess as sp
from collections import namedtuple
import datetime
from getpass import getuser
import sys
import datetime
from itertools import groupby


def qstat(username=None):
    username = username if username is not None else getuser()
    cmd = ['qstat', '-u', username, '-xml']
    stdout = sp.check_output(cmd)
    return stdout


class UnsupportedPythonVersion(RuntimeError):
    pass


def python_version_check():
    v = sys.version_info
    if v.major == 2:
        if v.minor < 7:
            raise UnsupportedPythonVersion("Python must be >= 2.7")


class JobInfo(namedtuple('JobInfo', ['state', 'job_number', 'name', 'submission_time',
                                     'queue_name', ])):

    NODE_MAP = {
        'state': 9,
        'number': 1,
        'name': 5,
        'submission_time': 11,
        'queue_name': 13,
    }

    @classmethod
    def from_node(cls, node):
        return cls(
            cls.parse_job_state(node),
            cls.parse_job_number(node),
            cls.parse_job_name(node),
            cls.parse_job_submission_time(node),
            cls.parse_job_queue_name(node),
        )

    @classmethod
    def parse_job_state(cls, node):
        return node.childNodes[cls.NODE_MAP['state']].firstChild.nodeValue

    @classmethod
    def parse_job_number(cls, node):
        return long(node.childNodes[cls.NODE_MAP['number']].firstChild.nodeValue)

    @classmethod
    def parse_job_name(cls, node):
        return node.childNodes[cls.NODE_MAP['name']].firstChild.nodeValue

    @classmethod
    def parse_job_submission_time(cls, node):
        time_string = node.childNodes[cls.NODE_MAP['submission_time']].firstChild.nodeValue
        dt = datetime.datetime.strptime(time_string, '%Y-%m-%dT%H:%M:%S')
        return dt

    @classmethod
    def parse_job_queue_name(cls, node):
        try:
            queue_name = node.childNodes[cls.NODE_MAP['queue_name']].firstChild.nodeValue
        except AttributeError:
            return ''
        else:
            return queue_name.split('@')[-1].split('.')[0]


    def render(self, width=100):
        taken_chars = 42
        return '{number:6} {name:{name_width}} {state:>4} {queue_name:6} | {submission_time:19}'.format(
            name_width=width - taken_chars,
            name=self.name,
            number=self.job_number,
            state='{}'.format(self.state),
            submission_time=str(self.submission_time),
            queue_name=self.queue_name,
        )


def main(args):
    python_version_check()
    xml_output = qstat(args.username)
    dom = parseString(xml_output)

    job_list = dom.firstChild.childNodes

    jobs = []
    for parent in job_list:
        for node in parent.childNodes:
            if node.nodeName == 'job_list':
                info = JobInfo.from_node(node)
                jobs.append(info)

    for k, g in groupby(jobs, key=lambda job: job.state):
        for node in sorted(g, key=lambda job: job.job_number):
            print(node.render(width=args.width))


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-u', '--username', help="Username to query")
    parser.add_argument('-w', '--width', help='Screen width', default=100, type=int)
    main(parser.parse_args())
