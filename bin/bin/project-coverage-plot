#!/usr/bin/env python


import argparse
import json
import numpy as np
import matplotlib.pyplot as plt


plt.style.use(["ggplot", "seaborn-poster"])


class Renderer:
    def __init__(self, data):
        self.data = data
        self._unsplatted = None

    def show(self):
        fig, axes = plt.subplots(2, 2, sharex=True)
        axes = axes.ravel()

        self.render_coverage(axes[0])
        self.render_num_lines(axes[1])
        self.render_num_tests(axes[2])
        self.render_test_time(axes[3])
        self.finalise(fig)

        plt.show()

    def render_coverage(self, axis):
        cov = self.unsplatted["coverage"] * 100
        axis.plot(self.x, cov, ".")
        axis.set(ylabel="Coverage [%]")

    def render_num_lines(self, axis):
        prod_lines = self.unsplatted["num_production_lines"]
        test_lines = self.unsplatted["num_test_lines"]
        prod_test_ratio = prod_lines / test_lines
        axis.plot(self.x, prod_test_ratio, ".")
        axis.set(ylabel="Ratio of production code to test code")

    def render_num_tests(self, axis):
        num_tests = self.unsplatted["num_tests"]
        axis.plot(self.x, num_tests, ".")
        axis.set(ylabel="Number of tests")

    def render_test_time(self, axis):
        test_time = self.unsplatted["time"]
        axis.plot(self.x, test_time, ".")
        axis.set(ylabel="Test run duration [s]")

    def finalise(self, fig):
        for ax in fig.get_axes():
            ax.set(xlabel="Revision")
        fig.tight_layout()

    @property
    def x(self):
        return np.arange(len(self.data))

    @property
    def unsplatted(self):
        skip_keys = ["revision", "rev"]
        if self._unsplatted is None:
            unsplatted = {}
            keys = self.data[0].keys()
            for key in keys:
                if key in skip_keys:
                    continue
                unsplatted[key] = np.array(
                    [self._to_float(item[key]) for item in self.data]
                )
            self._unsplatted = unsplatted
        return self._unsplatted

    def _to_float(self, value):
        if value is None:
            return np.nan
        return float(value)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("file", type=argparse.FileType("r"))
    args = parser.parse_args()

    data = json.load(args.file)
    renderer = Renderer(data)
    renderer.show()
