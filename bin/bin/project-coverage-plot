#!/usr/bin/env python


import argparse
import json
import numpy as np
import matplotlib.pyplot as plt


plt.style.use(["ggplot", "seaborn-poster"])


class Renderer:
    def __init__(self, data):
        self.data = data

    def show(self):
        fig, axes = plt.subplots(2, 2, sharex=True)
        axes = axes.ravel()

        self.render_coverage(axes[0])
        self.render_num_lines(axes[1])
        self.render_num_tests(axes[2])
        self.render_test_time(axes[3])
        self.finalise(fig)

        plt.show()

    def render_coverage(self, axis):
        cov = [self._to_float(item["coverage"]) * 100 for item in self.data]
        axis.plot(self.x, cov, ".")
        axis.set(ylabel="Coverage [%]")

    def render_num_lines(self, axis):
        num_lines = [self._to_float(item["num_lines"]) for item in self.data]
        axis.plot(self.x, num_lines, ".")
        axis.set(ylabel="Number of code lines")

    def render_num_tests(self, axis):
        num_lines = [self._to_float(item["num_tests"]) for item in self.data]
        axis.plot(self.x, num_lines, ".")
        axis.set(ylabel="Number of tests")

    def render_test_time(self, axis):
        num_lines = [self._to_float(item["time"]) for item in self.data]
        axis.plot(self.x, num_lines, ".")
        axis.set(ylabel="Test run duration [s]")

    def finalise(self, fig):
        for ax in fig.get_axes():
            ax.set(xlabel="Revision")
        fig.tight_layout()

    @property
    def x(self):
        return np.arange(len(self.data))

    def _to_float(self, value):
        if value is None:
            return np.nan
        return float(value)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("file", type=argparse.FileType("r"))
    args = parser.parse_args()

    data = json.load(args.file)
    renderer = Renderer(data)
    renderer.show()
