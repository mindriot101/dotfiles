#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import division, print_function, absolute_import
import argparse
import logging
import subprocess as sp
import tempfile
from contextlib import contextmanager
import joblib
from astropy.io import fits
import matplotlib.pyplot as plt
import numpy as np
from scipy import stats

logging.basicConfig(level='INFO', format='%(levelname)7s %(message)s')
logger = logging.getLogger(__name__)


@contextmanager
def build_catalogue(filename):
    with tempfile.NamedTemporaryFile(suffix='.fits', prefix='cat-') as tfile:
        cmd = map(str, ['imcore', filename, 'noconf', tfile.name, 2, 7, '--noell'])
        logger.info('Running imcore')
        logger.debug('CMD: %s', ' '.join(cmd))
        sp.check_call(cmd)
        tfile.seek(0)

        yield tfile.name


@contextmanager
def perform_skymatch(catalogue_name):
    with tempfile.NamedTemporaryFile(suffix='.fits', prefix='match-') as tfile:
        cmd = map(str, ['stilts',
                        'cdsskymatch',
                        'cdstable=II/246/out',
                        'in={}'.format(catalogue_name),
                        'ra=radiansToDegrees(RA)',
                        'dec=radiansToDegrees(DEC)',
                        'out={}'.format(tfile.name),
                        'radius=50',
                        'find=best',])
        logger.info('Matching')
        logger.debug('CMD: %s', ' '.join(cmd))
        sp.check_call(cmd)
        tfile.seek(0)

        yield tfile.name


def extract_matched_catalogue(filename):
    with build_catalogue(filename) as catalogue_name:
        with perform_skymatch(catalogue_name) as match_name:
            return fits.getdata(match_name, 1)


def plot_seps_dist(matched_catalogue):
    seps = matched_catalogue['angDist']
    med_sep = np.median(seps)

    fig, axis = plt.subplots()
    axis.hist(seps, bins=25, range=(0, 5), histtype='step', lw=2)
    axis.axvline(med_sep, lw=2)
    axis.set_title('Median separation: {:.3f}"'.format(med_sep))

    axis.set_xlabel(r'Separation / "')
    fig.tight_layout()


def plot_radial_offsets(filename, matched_catalogue, bins=8):
    seps = matched_catalogue['angDist']
    med_sep = np.median(seps)
    upper_limit = 3. * med_sep
    ind = seps < upper_limit

    header = fits.getheader(filename)
    central_pix = (header['crpix1'], header['crpix2'])
    dx = (matched_catalogue['X_coordinate'] - central_pix[0])
    dy = (matched_catalogue['Y_coordinate'] - central_pix[1])
    r = np.sqrt(dx ** 2 + dy ** 2)

    binned_seps, binned_r, _ = stats.binned_statistic(r, seps,
                                                      statistic='median',
                                                      bins=bins)
    binned_sep_err, _, _ = stats.binned_statistic(
        r, seps,
        bins=binned_r,
        statistic=lambda d: np.std(d) / np.sqrt(d.size))
    bin_centres = (binned_r[:-1] + binned_r[1:]) / 2.

    binned_delta = (binned_seps - med_sep) / binned_sep_err

    chisq = (binned_delta ** 2).sum() / (binned_seps.size - 1)

    fig, axes = plt.subplots(2, 1,
                             sharex=True,
                             gridspec_kw={'height_ratios': [0.8, 0.2]})
    axes[0].plot(r[ind], seps[ind], '.', alpha=0.2)
    axes[0].errorbar(bin_centres, binned_seps, binned_sep_err,
                     marker='.',
                     capsize=0.,
                     drawstyle='steps-mid')
    axes[0].axhline(med_sep)
    axes[0].set_ylim(ymax=upper_limit)

    axes[1].errorbar(bin_centres, binned_delta, np.ones_like(binned_delta),
                     marker='.',
                     capsize=0.,
                     ls='None')
    axes[1].axhline(0.)

    axes[0].set_ylabel(r'Separation / "')
    axes[1].set_xlabel(r'Radial distance from centre')
    axes[0].set_title('Centre: {:.2f}, {:.2f}'.format(*central_pix))
    axes[1].set_title('r$\chi^2: {:.2f}$'.format(chisq))

    fig.tight_layout()


def main(args):
    if args.verbose:
        logger.setLevel('DEBUG')
    logger.debug(args)

    cachedir = '.tmp' if args.cache else None
    memory = joblib.Memory(cachedir=cachedir)
    fn = memory.cache(extract_matched_catalogue)

    matched_catalogue = fn(args.filename)

    plot_seps_dist(matched_catalogue)
    plot_radial_offsets(args.filename, matched_catalogue, bins=args.nbins)

    plt.show()


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('filename')
    parser.add_argument('-b', '--nbins', type=int, required=False, default=8)
    parser.add_argument('-c', '--cache', action='store_true')
    parser.add_argument('-v', '--verbose', action='store_true')
    main(parser.parse_args())
