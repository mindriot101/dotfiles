let g:mapleader = ','
let g:maplocalleader = '\\'

call plug#begin('~/.vim/bundle')

if !has('nvim')
    Plug 'tpope/vim-sensible'
endif

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install --no-update-rc --no-completion --key-bindings' }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-commentary'
Plug 'phildawes/racer'
Plug 'racer-rust/vim-racer'
Plug 'autozimu/LanguageClient-neovim', { 'do': ':UpdateRemotePlugins' }
Plug 'roxma/nvim-completion-manager'
Plug 'roxma/nvim-cm-racer'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rsi'
Plug 'fatih/vim-go'
Plug 'christoomey/vim-tmux-runner'
Plug 'elixir-editors/vim-elixir'
Plug 'ElmCast/elm-vim'
Plug 'janko-m/vim-test'
Plug 'w0rp/ale'
Plug 'cespare/vim-toml'
Plug 'tikhomirov/vim-glsl'

call plug#end()

set ttimeoutlen=0
set shiftwidth=4
set tabstop=4
set smartcase
set expandtab
set smartcase
set ignorecase
set hidden
set tags+=.git/tags
set wildmode=longest:full

nnoremap <space> :nohl<cr>
nnoremap <C-h> <C-w><C-h>
nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-l> <C-w><C-l>
nnoremap cp mmgg"+yG'm

if executable('rg')
    set grepprg=rg\ --vimgrep
endif

" FZF
set rtp+=~/.fzf
let g:fzf_command_prefix = 'Fzf'
nnoremap <leader>f :FzfGitFiles<cr>
nnoremap <leader>F :FzfFiles<cr>
nnoremap gb :FzfBuffers<cr>
nnoremap gs :FzfTags<cr>
nnoremap gl :FzfLines<cr>
nnoremap gL :FzfBLines<cr>
nnoremap <leader>a :FzfAg<cr>

" Configure vim tmux runner
let g:VtrStripLeadingWhitespace = 1
let g:VtrClearEmptyLines = 1
let g:VtrAppendNewline = 1

" Configure vim test
nnoremap <silent> tf :update\|:TestFile<Cr>
nnoremap <silent> tl :update\|:TestLast<Cr>
nnoremap <silent> tc :update\|:TestNearest<Cr>
let test#python#runner = 'pytest'

nnoremap <leader>v :VtrAttachToPane<cr>

" Create shorter 'V' command which is easier to type
command! -nargs=? V call VtrSendCommand(<f-args>)

" Configure vim fugitive
nnoremap <leader>gc :Gcommit -v<cr>
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>gr :Gread<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>ga :Gcommit -v --amend<cr>

" Configure ale
let g:ale_sign_column_always = 0
let g:ale_rust_cargo_use_check = 1
let g:ale_rust_cargo_check_all_targets = 1

" language server protocol
let g:LanguageClient_serverCommands = {
    \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
    \ }
let g:LanguageClient_autoStart = 1
nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>

" racer + rust
let g:rustfmt_autosave = 1
let g:rustfmt_fail_silently = 1
let g:racer_cmd = "/usr/bin/racer"
let g:racer_experimental_completer = 1
let $RUST_SRC_PATH = systemlist("rustc --print sysroot")[0] . "/lib/rustlib/src/rust/src"

" Configure neovim's terminal mode
if has('nvim')
	tnoremap <Esc> <C-\><C-n>
	tnoremap <M-[> <Esc>
	tnoremap <C-v><Esc> <Esc>

    autocmd TermOpen * startinsert
endif

set background=dark
