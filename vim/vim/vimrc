let g:mapleader = ','
let g:maplocalleader = '\\'

call plug#begin('~/.vim/bundle')

if !has('nvim')
    Plug 'tpope/vim-sensible'
endif

Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install --no-update-rc --no-completion --key-bindings' }
Plug 'rust-lang/rust.vim', { 'for': 'rust' }
Plug 'nelstrom/vim-markdown-folding'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'christoomey/vim-tmux-runner'
Plug 'elixir-editors/vim-elixir', { 'for': 'elixir' }
Plug 'mhinz/vim-mix-format', { 'for': 'elixir' }
Plug 'ElmCast/elm-vim', { 'for': 'elm' }
Plug 'janko-m/vim-test'
Plug 'cespare/vim-toml', { 'for': 'toml' }
Plug 'machakann/vim-highlightedyank'
Plug 'posva/vim-vue', { 'for': 'vue' }
Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }
Plug 'kassio/neoterm'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'takac/vim-hardtime'
Plug 'w0rp/ale'
Plug 'hashivim/vim-terraform'
Plug 'uarun/vim-protobuf'

call plug#end()

set mouse=a
set scrolloff=5
set number
set relativenumber
set ttimeoutlen=0
set shiftwidth=4
set tabstop=4
set smartcase
set expandtab
set ignorecase
set hidden
set tags+=.git/tags
set wildmode=list:longest,list:full
set history=50
set complete=.,w,b,u,t
set ruler
set showcmd
set incsearch
set laststatus=2
set backspace=2
set autowrite
set nowrap
set textwidth=0
set breakindent
set synmaxcol=1024
if has('nvim')
    set termguicolors
endif
set linebreak
" Use global regex replaces by default
set gdefault
" Configure minimum window width
set winwidth=99
set updatetime=250
" If buffer is already open when switching, switch to it
set switchbuf+=useopen

" Prevent vim from clobbering the scrollback buffer
set t_ti= t_te=

" Center search results
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz

" Sane splits
set splitright
set splitbelow

if has('nvim')
    set inccommand=nosplit
endif

" --- Set up backups
" Protect changes between writes. Default values of
" updatecount (200 keystrokes) and updatetime
" (4 seconds) are fine
set swapfile
set directory^=~/.vim/swap//

" protect against crash-during-write
set writebackup
" but do not persist backup after successful write
set nobackup
" use rename-and-write-new method whenever safe
set backupcopy=auto
" patch required to honor double slash at end
if has("patch-8.1.0251")
	" consolidate the writebackups -- not a big
	" deal either way, since they usually get deleted
	set backupdir^=~/.vim/backup//
end

" Set up persistent undo
set undofile
set undodir=~/.vimundo

set modeline
set lazyredraw
if !has('nvim')
    set ttyfast
endif

function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>

nnoremap <space> :nohl<cr>
nnoremap <C-h> <C-w><C-h>
nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-l> <C-w><C-l>
nnoremap cp :0,$y+<Cr>
nnoremap ' `
nnoremap ` '
nnoremap j gj
nnoremap k gk

cnoremap %s/ %sm/

" escape with Ctrl-j
inoremap <C-j> <esc>
vnoremap <C-j> <esc>
inoremap <C-c> <esc>
vnoremap <C-c> <esc>

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

if executable('rg')
    set grepprg=rg\ --vimgrep
endif

" FZF
set rtp+=~/.fzf
let g:fzf_command_prefix = 'Fzf'
nnoremap <leader>f :FzfGitFiles<cr>
nnoremap <leader>F :FzfFiles<cr>
nnoremap gb :FzfBuffers<cr>
nnoremap gs :FzfTags<cr>
nnoremap gl :FzfRg<cr>
nnoremap gL :FzfBLines<cr>
nnoremap <leader>a :FzfAg<cr>

" Configure vim tmux runner
let g:VtrStripLeadingWhitespace = 1
let g:VtrClearEmptyLines = 1
let g:VtrAppendNewline = 1

" Expand %% to the current directory
cnoremap %% <c-r>=expand('%:h') . '/'<cr>

nnoremap <silent> <leader>ve :tabe $MYVIMRC<Cr>
nnoremap <silent> <leader>vr :source $MYVIMRC\|echo "Reloaded!"<Cr>
nnoremap <silent> <leader>ev :echo "Use <leader>ve"<Cr>

" Add mapping to open/close the quickfix list
" Taken from: http://vim.wikia.com/wiki/Toggle_to_open_or_close_the_quickfix_window
function! GetBufferList()
  redir =>buflist
  silent! ls!
  redir END
  return buflist
endfunction

function! ToggleList(bufname, pfx)
  let buflist = GetBufferList()
  for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
    if bufwinnr(bufnum) != -1
      exec(a:pfx.'close')
      return
    endif
  endfor
  if a:pfx == 'l' && len(getloclist(0)) == 0
      echohl ErrorMsg
      echo "Location List is Empty."
      return
  endif
  let winnr = winnr()
  exec(a:pfx.'open')
  if winnr() != winnr
    wincmd p
  endif
endfunction

" nmap <silent> <leader>l :call ToggleList("Location List", 'l')<CR>
nmap <silent> Q :call ToggleList("Quickfix List", 'c')<CR>

" Bind K to grep word under cursor
nnoremap <silent> K :grep! "<C-R><C-W>"<cr><cr>\|:copen<Cr>

" Switch panes
nnoremap <leader><leader> <C-^>

" remove help key
map <F1> <Esc>
imap <F1> <Esc>

" Configure vim test
nnoremap <silent> tf :update\|:TestFile<Cr>
nnoremap <silent> tl :update\|:TestLast<Cr>
nnoremap <silent> tc :update\|:TestNearest<Cr>
let test#python#runner = 'pytest'

nnoremap <leader>v :VtrAttachToPane<cr>

" Create shorter 'V' command which is easier to type
command! -nargs=? V call VtrSendCommand(<f-args>)

" Configure vim fugitive
nnoremap <leader>gc :Gcommit -v<cr>
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>gr :Gread<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>ga :Gcommit -v --amend<cr>

" Configure language client
let g:LanguageClient_serverCommands = {
            \ 'rust': ['~/.cargo/bin/rustup', 'run', 'nightly', 'rls'],
            \ 'javascript': ['/usr/local/bin/javascript-typescript-stdio'],
            \ 'javascript.jsx': ['tcp://127.0.0.1:2089'],
            \ 'python': ['/usr/local/bin/pyls'],
            \ }
let g:LanguageClient_autoStart = 1
let g:LanguageClient_useVirtualText = 0
nnoremap <silent> gm :call LanguageClient#textDocument_hover()<CR>

inoremap jj <Esc>

" When editing a file, always jump to the last known cursor position.
" Don't do it for commit messages, when the position is invalid, or when
" inside an event handler (happens when dropping a file on gvim).
autocmd BufReadPost *
\ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
\   exe "normal g`\"" |
\ endif

" Configure neovim's terminal mode
if has('nvim')
	tnoremap <Esc> <C-\><C-n>
	tnoremap <M-[> <Esc>
	tnoremap <C-v><Esc> <Esc>

    autocmd TermOpen * startinsert
endif

" Configure ALE
let g:ale_set_highlights = 1  " Disable highlights
let g:ale_virtualtext_cursor = 1
highlight link ALEWarningSign Todo
highlight link ALEErrorSign WarningMsg
highlight link ALEVirtualTextWarning Todo
highlight link ALEVirtualTextInfo Todo
highlight link ALEVirtualTextError WarningMsg
if has('nvim')
    highlight ALEError guibg=None
    highlight ALEWarning guibg=None
endif
let g:ale_sign_error = "✖"
let g:ale_sign_warning = "⚠"
let g:ale_sign_info = "i"
let g:ale_sign_hint = "➤"

" Automatically format elixir files on save
let g:mix_format_on_save = 1

if has('nvim')
    runtime! plugin/python_setup.vim
endif

" Disable go version warnings
let g:go_version_warning = 0

" Configure elm.vim
let g:elm_format_fail_silently = 1

" Configure gitgutter
nnoremap [g :GitGutterPrevHunk<cr>
nnoremap ]g :GitGutterNextHunk<cr>
let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '>'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_removed_first_line = '^'
let g:gitgutter_sign_modified_removed = '<'

" Enable limelight when entering Goyo mode
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

set background=dark
colorscheme lucius

highlight ColorColumn ctermbg=0
