" {{{ Init
" Remap the leader key to comma
let g:mapleader=','
let g:maplocalleader='\\'

if &compatible | set nocompatible | endif

augroup vimrc
    autocmd!
augroup END

" }}}
" {{{ Plugins
" {{{ Vim Plug
call plug#begin('~/.vim/bundle')

" tpope plugins, these deserve their own section
" start with vim-sensible
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-eunuch'

" Custom plugins
Plug 'ctrlpvim/ctrlp.vim'
Plug 'janko-m/vim-test'
Plug 'christoomey/vim-tmux-runner'
Plug 'christoomey/vim-tmux-navigator'
Plug 'Wolfy87/vim-enmasse'
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-indent'
Plug 'bps/vim-textobj-python'
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'garbas/vim-snipmate'
Plug 'honza/vim-snippets'
Plug 'airblade/vim-gitgutter'
Plug 'editorconfig/editorconfig-vim'
Plug 'milkypostman/vim-togglelist'
Plug 'benekastah/neomake'
Plug 'scrooloose/syntastic'

" Languages
Plug 'sheerun/vim-polyglot'
Plug 'chase/vim-ansible-yaml'
Plug 'mitsuhiko/vim-jinja'
Plug 'vim-scripts/TWiki-Syntax', { 'for': 'twiki' }
Plug 'zah/nimrod.vim', { 'for': 'nim' }

" My plugins
Plug 'mindriot101/vim-yapf'

call plug#end()
" }}}
" Plugin settings {{{
" {{{ ctrlp
map <leader>f :CtrlP<cr>
map <leader>b :CtrlPBuffer<cr>
let g:ctrlp_map = "<leader>f"

" Always open file in new buffer
let g:ctrlp_switch_buffer = 0

" Use current working directory always
let g:ctrlp_working_path_mode = 0

" Open new files with <c-y> in same window
let g:ctrlp_open_new_file = 'r'

" Use silver searcher if available
if executable('ag')
    " Let ctrlp use ag for files
    let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
                \ --ignore .git
                \ --ignore .svn
                \ --ignore .hg
                \ --ignore .DS_Store
                \ --ignore "**/*.pyc"
                \ -g ""'

    " Follow symlinks but not duplicates
    let g:ctrlp_follow_symlinks = 1

    " Change ctrlp style
    let g:ctrlp_match_window = 'bottom,order:btt'

    " Only remember a limited number of files
    let g:ctrlp_mruf_max = 0

    " Disable ag caching
    let g:ctrlp_use_caching = 0
endif

" Add ctrlp extensions
let g:ctrlp_extensions = ['tag', 'buffertag', 'quickfix']

let g:ctrlp_custom_ignore = '\v\~$|\.(o|swp|pyc|wav|mp3|ogg|blend)$|(^|[/\\])\.(hg|git|bzr)($|[/\\])|venv/*'
"}}}
" {{{ vim-test
nnoremap <silent> <leader>ra :TestSuite<cr>
nnoremap <silent> <leader>rc :TestNearest<cr>
nnoremap <silent> <leader>rf :TestFile<cr>
nnoremap <silent> <leader>rl :TestLast<cr>

let g:test#python#runner = 'pytest'
let g:test#python#pytest#options = '--exitfirst'
"}}}
" {{{ fugitive
nnoremap <leader>gc :Gcommit -v<cr>
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>gr :Gread<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>ga :Gcommit -v --amend<cr>
"}}}
" {{{ vim-yapf
" Mappings
autocmd vimrc FileType python map <buffer> <leader>y :Yapf --verify --style='{based_on_style: google, indent_width: 4, column_limit: 79}'<cr>
"}}}
" {{{ vim-commentary
let g:commentary_map_backslash = 0
"}}}
" {{{ vim-json
let g:vim_json_syntax_conceal = 0
"}}}
" {{{ snipmate
:imap <C-J> <Plug>snipMateNextOrTrigger
:smap <C-J> <Plug>snipMateNextOrTrigger
"}}}
" {{{ vim-tmux-runner
" Better python settings
let g:VtrStripLeadingWhitespace = 0
let g:VtrClearEmptyLines = 0
let g:VtrAppendNewline = 1
"}}}
" {{{ Goyo
nnoremap gG :Goyo<Cr>
"}}}
" {{{ editorconfig
let g:EditorConfig_exclude_patterns = ['fugitive://.*']
"}}}
" {{{ vim-togglelist
nnoremap coq :call ToggleQuickfixList()<Cr>
"}}}
" {{{ vimtex
let g:vimtex_fold_enabled = 0
let g:vimtex_view_general_options = "@pdf -a skim"
"}}}
" {{{ vim-markdown
let g:markdown_fenced_languages = ['python', 'sh']
"}}}
" }}}
" }}}
" {{{ Settings
""""""""""""""""""""
"     SETTINGS     "
""""""""""""""""""""

" set up some nice tab defaults
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab

" Decrease timeout length which leaving insert mode
set timeoutlen=400

" Nice line breaks
set linebreak

" Increase encryption protection
if v:version > 704
    set cryptmethod=blowfish2
endif

" Line numbering
set norelativenumber
set nonumber

" Do not use hlsearch
set nohlsearch

" Do not use more prompt
set nomore

" Automatically save on certain commands
set autowrite

" Update shell
let g:is_posix = 1

" Shorten the paren matching flash time
set matchtime=1

" Do not jump to the start of line when indenting
set nostartofline

" set case options for searching
set ignorecase
set smartcase

" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

" nice file formatting
set smartindent
set cindent

" Join lines with 1 space instead of 2
set nojoinspaces

" Disable all bells
set novisualbell
set noerrorbells
set t_vb=

" Set the tags file location
set tags=.git/tags,tags;/

" Tell us when anything is changed via :...
set report=0

" Enable fast tty mode
set ttyfast

" Enable folding
set foldenable

" Change the way tab autocompletion works
set wildmode=longest,list:longest

" Disable escape keys which makes vim more responsive
set noesckeys

" Hide buffers instead of closing them
set hidden

" Don't update the display while executing macros
set lazyredraw

" Match parens when highlighting them
set showmatch

" Handle the splat clipboard
if has('unnamedplus')
    set clipboard=unnamedplus
endif

" source local vimrc files
set exrc
set secure

" Enable british spelling
set spelllang=en_gb

" Better formatting
if executable('par')
    set formatprg=par
endif

" Configure 'Press enter to continue' messages
set shortmess=atI

" Swaps, undos and backups
set undofile
set noswapfile
set backup
set writebackup
" --------
set backupskip=/tmp/*,/private/tmp/*
set undodir=~/.vim/tmp/undo
set backupdir=~/.vim/tmp/backup
set directory=~/.vim/tmp/swap

" Disable conceal
set conceallevel=0

" Never show the tab line
set showtabline=1

" Set some ignore patterns
set wildignore+=*.aux,*.o,*.git,/tmp/*,*.so,*.swp,*.zip,venv,env,*.pyc

set switchbuf=useopen

" Jump back to last file position
autocmd vimrc BufReadPost *
            \ if line("'\"") > 1 && line("'\"") <= line("$") |
            \ exe "normal! g`\"" |
            \ endif

" ... unless it's a git commit
autocmd vimrc FileType gitcommit autocmd! vimrc bufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

" Nicer netrw style
let g:netrw_liststyle = 3

" Use ag as grepprg
if executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor\ --ignore-case
endif

" }}}
" {{{ Statusline
" Set up statusline
set statusline=

" Buffer number and pipe character with spaces
set statusline+=%-3.3n\ 

" Filename relative to opening path
set statusline+=%f\ 

" Status markers
set statusline+=%h%m%r%q

" End of left section, start right section
set statusline+=%=

" File type
set statusline+=%y\ 

" Cursor position
set statusline+=%-14.(%l,%c%V%)\ 

" View position
set statusline+=%P

" }}}
" {{{ Mappings
""""""""""""""""""""
"     MAPPINGS     "
""""""""""""""""""""

" Disable the 'help' key
nnoremap K <nop>

" Make line based movement more sane
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k
vnoremap j gj
vnoremap k gk
vnoremap gj j
vnoremap gk k

" Multipurpose tab key from grb
function! InsertTabWrapper()
    let s:col = col('.') - 1
    if !s:col || getline('.')[s:col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" settings from thoughtbot dotfiles repo
" Swap between two files
noremap gl <C-^>

" Speed up ctrl-e/ctrl-y
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" Swap the mark keys
nnoremap ' `
nnoremap ` '

" Map control-s to update, rather than write
nnoremap <C-s> :update<CR>
inoremap <C-s> :update<CR>
vnoremap <C-s> :update<CR>

" Remap the Q key
noremap Q gqip

" Expand %% to the current directory
" http://vimcasts.org/e/14
cnoremap %% <c-r>=expand('%:h') . '/'<cr>

" Make the Y key work
noremap Y y$

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" disable f1 key
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Let the arrow keys resize the window in normal mode
" https://github.com/martin-svk/dot-files/blob/master/vim/nvimrc#L413
nnoremap <silent> <Up> :resize +1<cr>
nnoremap <silent> <Down> :resize -1<cr>
nnoremap <silent> <Left> :vertical resize -1<cr>
nnoremap <silent> <Right> :vertical resize +1<cr>

inoremap <Up> <esc>:echo "Use k!"<cr>
inoremap <Down> <esc>:echo "Use j!"<cr>
inoremap <Left> <esc>:echo "Use h!"<cr>
inoremap <Right> <esc>:echo "Use l!"<cr>

" Remap the move-window keys
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" Handy saving of text if a C-u is pressed
inoremap <C-u> <C-g>u<C-u>
inoremap <C-w> <C-g>u<C-w>

" Quick file editing
nnoremap cv :tabe $MYVIMRC<cr>
nnoremap cz :tabe ~/.zshrc<cr>

" open Ag
command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!

nnoremap <leader>a :Ag<space>

" Default leader mapping to run current file,
" with eunuch.vim this should basically work
" once a shebang is in place
noremap <leader>t :update\|!./%<cr>

" Bind K to grep word under cursor
nnoremap <silent> K :grep! "<C-R><C-W>"<cr><cr>\|:copen<Cr>

" }}}
" {{{ Misc

""""""""""""""""""""
"       MISC       "
""""""""""""""""""""

" Diffs copy wrap from the global setting
autocmd vimrc FilterWritePre * if &diff | setlocal wrap< | endif

" Function to take quickfix files and populate the arglist
command! -nargs=0 -bar Qargs execute 'args' QuickfixFilenames()
function! QuickfixFilenames()
  " Building a hash ensures we get each buffer only once
  let buffer_numbers = {}
  for quickfix_item in getqflist()
    let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
  endfor
  return join(map(values(buffer_numbers), 'fnameescape(v:val)'))
endfunction

" }}}
" {{{ Neovim

""""""""""""""""""""
"       Neovim     "
""""""""""""""""""""

" Neovim only...
if has('nvim')

    let g:python_host_prog = '/usr/local/bin/python'

    " Hack to allow <c-h> to work properly
    nmap <BS> <C-W>h

 endif

" }}}
" {{{ Theming
set background=dark
colorscheme srw256

" Make it more obvious which paren I'm on
hi MatchParen cterm=none ctermbg=black ctermfg=yellow

" Make git gutterline black background
hi SignColumn ctermbg=none
"}}}
" vim: foldmethod=marker
