"  Init

if has('autocmd')
    filetype plugin indent on
endif

if has('syntax') && !exists('g:syntax_on')
    syntax enable
endif
" Remap the leader key to comma
let g:mapleader=','
let g:maplocalleader='\\'

if &compatible | set nocompatible | endif

augroup vimrc
    autocmd!
augroup END

"
"  Plugins
"  Vim Plug
call plug#begin('~/.vim/bundle')

" Other plugins
Plug 'christoomey/vim-tmux-runner'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install --no-update-rc --no-completion --key-bindings' }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-vinegar'
Plug 'radenling/vim-dispatch-neovim'
Plug 'leafgarland/typescript-vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'janko-m/vim-test'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'ElmCast/elm-vim'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-eunuch'
Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
Plug 'w0rp/ale'
if has('nvim')
    Plug 'kassio/neoterm'
endif

call plug#end()

let polyglot_disabled = ['elm']

" Sensible vim settings
set autoindent
set backspace=indent,eol,start
set complete-=i
set nosmarttab
set nrformats-=octal
set ttimeout
set ttimeoutlen=0
set incsearch
set laststatus=2
set ruler
set wildmenu
if !&scrolloff
    set scrolloff=1
endif
if !&sidescrolloff
    set sidescrolloff=5
endif
set display+=lastline
set encoding=utf-8
if v:version > 703 || v:version == 703 && has('patch541')
    set formatoptions+=j " Delete comment character when joining commented lines
endif
set autoread
if &history < 1000
    set history=1000
endif
if &tabpagemax < 50
    set tabpagemax=50
endif
if !empty(&viminfo)
    set viminfo^=!
endif
set sessionoptions-=options
if &t_Co == 8 && $TERM !~# '^linux\|^Eterm'
    set t_Co=16
endif
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
    runtime! macros/matchit.vim
endif
inoremap <C-U> <C-G>u<C-U>

" Additional settings
set relativenumber
set number
set noswapfile
set ignorecase
set showcmd
set smartcase
set tabstop=4
set expandtab
set shiftwidth=4
set mouse=a
set linebreak
set smartindent
set cindent
set report=0
if !has('nvim')
    set noesckeys
endif
set hidden
set lazyredraw
set shortmess=atI
set wildignore+=*.aux,*.o,*.git,/tmp/*,*.so,*.swp,*.zip,venv,.venv,env,*.pyc
set switchbuf=useopen
set softtabstop=4
set shiftround
set noshowmatch
set matchtime=0
set tags=.git/tags,./tags,tags,/
set modelines=1
set showtabline=1  " Only show tabs when there is more than one file
set nohlsearch
set textwidth=0  " disable hard wrapping
set nocursorline

" No soft line wrapping
set nowrap

" Configure backups
set backup
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set undodir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup
set undofile

" Better breaking
set breakindent
let &showbreak='â†£'

" Improve speed of syntax highlighting
set synmaxcol=200

" Search with fancy regex search by default
nnoremap / /\v
nnoremap ? ?\v

" Move down by screen lines
nnoremap j gj
nnoremap k gk

" Add mapping for copying all file contents into the system buffer
nnoremap cp :0,$y+<Cr>

" Swap the mark keys
nnoremap ' `
nnoremap ` '

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

if executable('rg')
    set grepprg=rg\ --color\ never\ --vimgrep
elseif executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor
endif

nnoremap <space> :nohlsearch<cr>

" FZF
set rtp+=~/.fzf
let g:fzf_command_prefix = 'Fzf'
nnoremap <leader>f :FzfGitFiles<cr>
nnoremap <leader>F :FzfFiles<cr>
nnoremap gb :FzfBuffers<cr>
nnoremap gs :FzfTags<cr>
nnoremap gl :FzfLines<cr>
nnoremap gL :FzfBLines<cr>
nnoremap <leader>a :FzfAg<cr>

" vim-test
nnoremap <silent> tf :update\|:TestFile<Cr>
nnoremap <silent> tl :update\|:TestLast<Cr>
nnoremap <silent> tc :update\|:TestNearest<Cr>

" Fugitive
nnoremap <leader>gc :Gcommit -v<cr>
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>gr :Gread<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>ga :Gcommit -v --amend<cr>

let g:commentary_map_backslash = 0

" Configure vim tmux runner
let g:VtrStripLeadingWhitespace = 1
let g:VtrClearEmptyLines = 1
let g:VtrAppendNewline = 1

nnoremap <leader>v :VtrAttachToPane<cr>

" Create shorter 'V' command which is easier to type
command! -nargs=? V call VtrSendCommand(<f-args>)

" Remap the move-window keys
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" Change the way tab autocompletion works
set wildmode=longest,list:longest

" Add mapping to open/close the quickfix list
" Taken from: http://vim.wikia.com/wiki/Toggle_to_open_or_close_the_quickfix_window
function! GetBufferList()
  redir =>buflist
  silent! ls!
  redir END
  return buflist
endfunction

function! ToggleList(bufname, pfx)
  let buflist = GetBufferList()
  for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
    if bufwinnr(bufnum) != -1
      exec(a:pfx.'close')
      return
    endif
  endfor
  if a:pfx == 'l' && len(getloclist(0)) == 0
      echohl ErrorMsg
      echo "Location List is Empty."
      return
  endif
  let winnr = winnr()
  exec(a:pfx.'open')
  if winnr() != winnr
    wincmd p
  endif
endfunction

" nmap <silent> <leader>l :call ToggleList("Location List", 'l')<CR>
nmap <silent> Q :call ToggleList("Quickfix List", 'c')<CR>

" Bind K to grep word under cursor
nnoremap <silent> K :grep! "<C-R><C-W>"<cr><cr>\|:copen<Cr>

if has('nvim')
  nnoremap TT :Ttoggle<cr>
endif

nnoremap <leader>ev :tabe ~/.vim/vimrc<cr>

" Default handler to save the current file
function! HandleEnter()
  if &buftype ==# 'quickfix' || &buftype ==# 'nofile'
    silent execute "normal! \<cr>"
  else
    silent execute "normal! :silent :update\<CR>"
  endif
endfunction

nnoremap <silent> <cr> :call HandleEnter()<cr>

" Automatically resize splits when window is resized
autocmd vimrc VimResized * wincmd =

if has('nvim')
      let g:python_host_prog = '/usr/local/bin/python'
      let g:python3_host_prog = '/usr/local/bin/python3'
      set shell=zsh

    " configure terinal commands
    tnoremap <Esc> <C-\><C-n>
endif

set background=dark
colorscheme srw256

" Customise colour scheme
" highlight Search guibg=NONE gui=underline guifg=NONE
