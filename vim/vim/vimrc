" {{{ Init
" Remap the leader key to comma
let g:mapleader=','
let g:maplocalleader='\\'

if &compatible | set nocompatible | endif

augroup vimrc
    autocmd!
augroup END

" }}}
" {{{ Plugins
" {{{ Vim Plug
call plug#begin('~/.vim/bundle')

" tpope plugins, these deserve their own section
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fireplace'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'

" Custom plugins
Plug 'Wolfy87/vim-enmasse'
Plug 'christoomey/vim-sort-motion'
Plug 'christoomey/vim-tmux-runner'
Plug 'editorconfig/editorconfig-vim'
Plug 'janko-m/vim-test'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --no-update-rc --no-completion --key-bindings' }
Plug 'junegunn/fzf.vim'
Plug 'kassio/neoterm'
Plug 'neomake/neomake'
Plug 'racer-rust/vim-racer'

"" Indentation
Plug 'bps/vim-textobj-python'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-user'

" Languages
Plug 'mitsuhiko/vim-jinja'
Plug 'sheerun/vim-polyglot'
Plug 'vim-scripts/TWiki-Syntax'
Plug 'vim-scripts/indentpython.vim'

" Colour schemes
Plug 'altercation/vim-colors-solarized'
Plug 'sickill/vim-monokai'

call plug#end()
" }}}
" Plugin settings {{{
" {{{ vim-test
nnoremap <silent> ta :TestSuite<cr>
nnoremap <silent> tc :TestNearest<cr>
nnoremap <silent> tf :TestFile<cr>
nnoremap <silent> tl :TestLast<cr>

let g:test#python#runner = 'pytest'
let g:test#python#pytest#executable = 'pytest'

if $TMUX != ''
    let test#strategy = "vtr"
else
    if has('nvim')
        let test#strategy = "neoterm"
    else
        let test#strategy = "basic"
    endif
endif
"}}}
" {{{ fugitive
nnoremap <leader>gc :Gcommit -v<cr>
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>gr :Gread<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>ga :Gcommit -v --amend<cr>
"}}}
" {{{ vim-commentary
let g:commentary_map_backslash = 0
"}}}
" {{{ vim-tmux-runner
" Better python settings
let g:VtrStripLeadingWhitespace = 0
let g:VtrClearEmptyLines = 0
let g:VtrAppendNewline = 1

nnoremap <leader>v :VtrAttachToPane<cr>

" Create shorter 'V' command which is easier to type
command! -nargs=? V call VtrSendCommand(<f-args>)

"}}}
" {{{ editorconfig
let g:EditorConfig_exclude_patterns = ['fugitive://.*']
"}}}
" {{{ vim-togglelist
nnoremap coq :call ToggleQuickfixList()<Cr>
"}}}
" {{{ vim-markdown
let g:markdown_fenced_languages = ['python', 'sh', 'rust', 'tcsh', 'sql', 'toml']
"}}}
" {{{ fzf
set rtp+=~/.fzf

nnoremap <leader>F :FZF<cr>
"}}}
" {{{ fzf.vim
" fzf mappings
nnoremap <leader>f :GitFiles<cr>
nnoremap gb :Buffers<cr>
nnoremap gt :Tags<cr>
nnoremap gL :Lines<cr>
nnoremap gl :BLines<cr>
nnoremap <leader>a :Ag<cr>
"}}}
" {{{ rust.vim
let g:rustfmt_autosave = 0
let g:rustfmt_fail_silently = 1
let g:rust_folding = 0
"}}}
" }}}
"
" }}}
" {{{ Settings
""""""""""""""""""""
"     SETTINGS     "
""""""""""""""""""""

" set up some nice tab defaults
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab

" Disable wrapping by default
set textwidth=0
set nowrap

" Set EVERYTHING to utf8
set termencoding=utf-8
set encoding=utf-8
set fileencodings=utf-8

" Despite not wrapping, in case I activate it somehow make
" sure we wrap in between words rather than at any point
set linebreak

" Do not show the cursor line
set nocursorline
set nocursorcolumn

" Show commands as they're being typed
set showcmd

" Decrease timeout length which leaving insert mode
set timeoutlen=400

" Increase encryption protection
if v:version > 704
    set cryptmethod=blowfish2
endif

" Line numbering
set norelativenumber
set nonumber

" Use hlsearch
set hlsearch

" Do not use more prompt
set nomore

" Automatically save on certain commands
set autowrite

" Update shell
let g:is_posix = 1

" Shorten the paren matching flash time
set matchtime=1

" Do not jump to the start of line when indenting
set nostartofline

" set case options for searching
set ignorecase
set smartcase

" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

" nice file formatting
set smartindent
set cindent

" Join lines with 1 space instead of 2
set nojoinspaces

" Disable all bells
set novisualbell
set noerrorbells
set t_vb=

" Set the tags file location
set tags=.git/tags,tags;/

" Tell us when anything is changed via :...
set report=0

" Enable fast tty mode
set ttyfast

" Enable folding
set foldenable

" Change the way tab autocompletion works
set wildmode=longest,list:longest

" Disable escape keys which makes vim more responsive
set noesckeys

" Hide buffers instead of closing them
set hidden

" Don't update the display while executing macros
set lazyredraw

" Match parens when highlighting them
set showmatch

" Handle the splat clipboard
if has('unnamedplus')
    set clipboard=unnamedplus
endif

" source local vimrc files
set exrc
set secure

" Enable british spelling
set spelllang=en_gb

" Configure 'Press enter to continue' messages
set shortmess=atI

" Swaps, undos and backups
if has('persistent_undo')
    set undofile
    set undolevels=5000
    set undodir=~/.vim/tmp/undo
endif

set noswapfile
set backup
set writebackup
" --------
set backupskip=/tmp/*,/private/tmp/*
set backupdir=~/.vim/tmp/backup
set directory=~/.vim/tmp/swap

" Disable conceal
set conceallevel=0

" Never show the tab line
set showtabline=1

" Set some ignore patterns
set wildignore+=*.aux,*.o,*.git,/tmp/*,*.so,*.swp,*.zip,.venv,env,*.pyc

set switchbuf=useopen

" Jump back to last file position
autocmd vimrc BufReadPost *
            \ if line("'\"") > 1 && line("'\"") <= line("$") |
            \ exe "normal! g`\"" |
            \ endif

" ... unless it's a git commit
autocmd vimrc FileType gitcommit autocmd! vimrc bufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

" Nicer netrw style
let g:netrw_liststyle = 3

" Use ag as grepprg
if executable('rg')
    set grepprg=rg
elseif executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor
endif

" Use two spaces after full stop if joining lines with sentences
set joinspaces

" Scroll sideways one character at a time, like most other editors
" rather than half a screen.
set sidescroll=1

" }}}
" {{{ Statusline
" Set up statusline
set statusline=

" Buffer number and pipe character with spaces
set statusline+=%-3.3n\ 

" Filename relative to opening path
set statusline+=%f\ 

" Status markers
set statusline+=%h%m%r%q

" End of left section, start right section
set statusline+=%=

" File type
set statusline+=%y\ 

" Cursor position
set statusline+=%-14.(%l,%c%V%)\ 

" View position
set statusline+=%P

" }}}
" {{{ Mappings
""""""""""""""""""""
"     MAPPINGS     "
""""""""""""""""""""
" Make Y fit in with D and C
nnoremap Y y$

" Disable the 'help' key
nnoremap K <nop>

" Cause space to turn of hlsearch
nnoremap <space> :nohlsearch<cr>

" Add mapping for copying all file contents into the system buffer
nnoremap cp :0,$y+<Cr>

" Make line based movement more sane
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k
vnoremap j gj
vnoremap k gk
vnoremap gj j
vnoremap gk k

" Search with fancy regex search by default
nnoremap / /\v
nnoremap ? ?\v

" Add mapping to toggle the git gutter
nnoremap cog :GitGutterToggle<Cr>

" Swap between two files
nnoremap <BS> <C-^>

" settings from thoughtbot dotfiles repo
" Speed up ctrl-e/ctrl-y
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" Swap the mark keys
nnoremap ' `
nnoremap ` '

" Expand %% to the current directory
" http://vimcasts.org/e/14
cnoremap %% <c-r>=expand('%:h') . '/'<cr>

" Make the Y key work
noremap Y y$

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" disable f1 key
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

inoremap <Up> <esc>:echo "Use k!"<cr>
inoremap <Down> <esc>:echo "Use j!"<cr>
inoremap <Left> <esc>:echo "Use h!"<cr>
inoremap <Right> <esc>:echo "Use l!"<cr>

" Remap the move-window keys
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" Handy saving of text if a C-u is pressed
inoremap <C-u> <C-g>u<C-u>
inoremap <C-w> <C-g>u<C-w>

" Quick file editing
nnoremap cv :vsplit $MYVIMRC<cr>
nnoremap cz :vsplit ~/.zshrc<cr>

" Default leader mapping to run current file,
" with eunuch.vim this should basically work
" once a shebang is in place
noremap <leader>t :update\|!./%<cr>

" Bind K to grep word under cursor
nnoremap <silent> K :grep! "<C-R><C-W>"<cr><cr>\|:copen<Cr>

" Mapping for toggling quickfix list
function! GetBufferList()
  redir =>buflist
  silent! ls!
  redir END
  return buflist
endfunction

function! ToggleList(bufname, pfx)
  let buflist = GetBufferList()
  for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
    if bufwinnr(bufnum) != -1
      exec(a:pfx.'close')
      return
    endif
  endfor
  if a:pfx == 'l' && len(getloclist(0)) == 0
      echohl ErrorMsg
      echo "Location List is Empty."
      return
  endif
  let winnr = winnr()
  exec(a:pfx.'open')
  if winnr() != winnr
    wincmd p
  endif
endfunction

nnoremap <silent> coq :call ToggleList("Quickfix List", 'c')<Cr>


" }}}
" {{{ Misc

""""""""""""""""""""
"       MISC       "
""""""""""""""""""""

" Diffs copy wrap from the global setting
autocmd vimrc FilterWritePre * if &diff | setlocal wrap< | endif

" Function to take quickfix files and populate the arglist
command! -nargs=0 -bar Qargs execute 'args' QuickfixFilenames()
function! QuickfixFilenames()
  " Building a hash ensures we get each buffer only once
  let buffer_numbers = {}
  for quickfix_item in getqflist()
    let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
  endfor
  return join(map(values(buffer_numbers), 'fnameescape(v:val)'))
endfunction

" Run a normal mode command and restore the cursor position afterwards
" Taken from https://stackoverflow.com/a/15994331/56711
function! Preserve(command)
  " Save the last search.
  let search = @/

  " Save the current cursor position.
  let cursor_position = getpos('.')

  " Save the current window position.
  normal! H
  let window_position = getpos('.')
  call setpos('.', cursor_position)

  " Execute the command.
  execute a:command

  " Restore the last search.
  let @/ = search

  " Restore the previous window position.
  call setpos('.', window_position)
  normal! zt

  " Restore the previous cursor position.
  call setpos('.', cursor_position)
endfunction

" Function to run clang format over code, with my
" style customisations
function! ClangFormat()
    call Preserve('0,$!clang-format -style="{BasedOnStyle: LLVM, IndentWidth: 4, SortIncludes: false}"')
endfunction

" }}}
" {{{ Neovim

""""""""""""""""""""
"       Neovim     "
""""""""""""""""""""

" Neovim only...
if has('nvim')

    if hostname() =~? "ngts"
        let g:python_host_prog = '/usr/bin/python2'
        let g:python3_host_prog = '/home/sw/.pyenv/versions/miniconda3-latest/bin/python'
        set shell=/home/sw/.local/bin/zsh
    else
        let g:python_host_prog = '/usr/local/bin/python'
        let g:python3_host_prog = '/usr/local/bin/python3'
        set shell=/usr/local/bin/zsh
    endif

 endif

" }}}
" {{{ Theming
set background=dark
colorscheme srw256

" Function to show syntax group under cursor
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
            \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
            \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

"}}}
" vim: foldmethod=marker
