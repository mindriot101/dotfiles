" {{{ Plugins
""""""""""""""""""""
"     PLUGINS      "
""""""""""""""""""""
" Vundle {{{

" Preamble {{{
" Remap the leader key to comma
let mapleader=','
let maplocalleader='\\'

" Load all of the plugins with vundle
filetype off


" Automatically install vundle
let s:VundleInstalled = 1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
    echo "Installing Vundle.."
    echo ""
    silent !git clone git://github.com/gmarik/vundle ~/.vim/bundle/vundle
    let s:VundleInstalled = 0
endif

let g:vundle_default_git_proto = 'git'

" Handle vundle here
set rtp+=~/.vim/bundle/vundle
call vundle#rc()
" }}}
" Plugins {{{
Bundle 'gmarik/vundle'

" tpope plugins, these deserve their own section
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-commentary'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-unimpaired'
Bundle 'tpope/vim-dispatch'
Bundle 'tpope/vim-markdown'
" Bundle 'tpope/vim-vinegar'

" Custom plugins
Bundle 'kien/ctrlp.vim'
Bundle 'mileszs/ack.vim'
Bundle 'rking/ag.vim'
Bundle 'nelstrom/vim-markdown-folding'

" My plugins or forks
Bundle 'mindriot101/srw-colorscheme.vim'

" Snipmate plugins
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'tomtom/tlib_vim'
Bundle 'garbas/vim-snipmate'
Bundle 'honza/vim-snippets'

" Language plugins
Bundle 'elixir-lang/vim-elixir'
"}}}
" Post setup {{{
filetype plugin indent on

if s:VundleInstalled == 0
    echo "Installing bundles"
    echo ""
    :BundleInstall
endif"}}}
"}}}
" Plugin settings {{{
" {{{ matchit
runtime macros/matchit.vim
"}}}
" {{{ snipmate
imap <c-j> <Plug>snipMateNextOrTrigger
smap <c-j> <Plug>snipMateNextOrTrigger
"}}}
" {{{ fugitive
nmap <leader>gc :Gcommit<cr>
nmap <leader>gd :Gdiff<cr>
nmap <leader>gw :Gwrite<cr>
nmap <leader>gr :Gread<cr>
nmap <leader>gl :Glog<cr>
"}}}
" {{{ ctrlp
let g:ctrlp_map = "<leader>f"

" Always open file in new buffer
let g:ctrlp_switch_buffer = 0

" Use current working directory always
let g:ctrlp_working_path_mode = 0

" Use silver searcher if available
if executable('ag')
    " Let ctrlp use ag for files
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

    " Follow symlinks but not duplicates
    let g:ctrlp_follow_symlinks = 1

    " Change ctrlp style
    let g:ctrlp_match_window = 'bottom,order:btt'

    " Only remember a limited number of files
    let g:ctrlp_mruf_max = 0

    " Disable ag caching
    let g:ctrlp_use_caching = 0
endif

"}}}
" {{{ ack
let g:ackprg = 'ag --nogroup --nocolor --column'
nnoremap <leader>a :Ack!<space>
"}}}
" {{{ markdown-folding
let g:markdown_fold_style = 'stacked'
"}}}
"}}}

" }}}
" {{{ Settings
""""""""""""""""""""
"     SETTINGS     "
""""""""""""""""""""

" turn syntax highlighting on
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
    syntax on
endif

" set up some nice tab defaults
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab
set smarttab
set shell=bash
scriptencoding utf-8

" Automatically save on certain commands
set autowrite

" Update shell
let g:is_posix = 1

" Shorten the paren matching flash time
set matchtime=3

" Set history settings
set history=250
set undolevels=100

" reload all file changes automatically
set autoread

" set incremental search
set incsearch

" set case options for searching
set ignorecase
set smartcase

" From Steve Losh
" iTerm2 is currently slow as ball at rendering the nice unicode lines, so for now I'll just use ascii pipes.  They're ugly but at least I won't want to kill myself when trying to move around a file.
set fillchars=diff:⣿,vert:│
set fillchars=diff:⣿,vert:\|

" show command as it's typed
set showcmd

" nice file formatting
set autoindent
set smartindent
set cindent

" always have status line on
set laststatus=2
set encoding=utf-8 " Necessary to show unicode glyphs

" make backspace behave nicely
set backspace=indent,eol,start

" Join lines with 1 space instead of 2
set nojoinspaces

" Disable all bells
set novisualbell
set noerrorbells
set vb t_vb=

" Set the tags file location
set tags=.git/tags,tags;/

" Tell us when anything is changed via :...
set report=0

" Enable fast tty mode
set ttyfast

" Enable folding
set foldenable

" Support file types in this order
set fileformats=unix,mac,dos

" Change the way tab autocompletion works
set wildmenu
set wildmode=list:longest,list:full

" Disable escape keys which makes vim more responsive
set noesckeys

" Hide buffers instead of closing them
set hidden

" Don't update the display while executing macros
set lazyredraw

" Match parens when highlighting them
set showmatch

" Set up statusline
set statusline=

" Thesaurus
set thesaurus+=~/thesaurus/mthesaur.txt

" Handle the splat clipboard
if has('unnamedplus')
    set clipboard=unnamedplus
endif

" source local vimrc files
set exrc
set secure

" Enable british spelling
set spelllang=en_gb

" Better formatting
set formatprg=par

" Configure 'Press enter to continue' messages
set shortmess=at

" Time out on key codes but not mappings
set notimeout
set ttimeout
set ttimeoutlen=10

set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup

" GRB does these
set winwidth=79

" Enable scrolljump
set scrolljump=10

" Disable conceal
set conceallevel=0

" Enable relativenumber
set relativenumber

" Enable number also to get the current line numbered, only in 7.4 and above
if version >= 704
    set number
endif

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright
set noequalalways

" Enable the ruler
set ruler

" Always show the tab line
set showtabline=1

" Set some ignore patterns
set wildignore+=*.aux,*.o,*.git,/tmp/*,*.so,*.swp,*.zip,venv,env,*.pyc

set switchbuf=useopen

" Enable auto sourcing of vim config files
augroup AutoloadVimrc
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
    autocmd BufWritePost ~/dotfiles/vim/vimrc source ~/dotfiles/vim/vimrc
augroup END

" Jump back to last file position
autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \ exe "normal! g`\"" |
    \ endif

" ... unless it's a git commit
autocmd FileType gitcommit autocmd! bufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

" Highlight trailing whitespace only in normal mode
highlight ExtraWhitespace ctermbg=red guibg=red
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/

" Set the status line
set statusline=%<%f\ %h%m%r%=%y\ %-14.(%l,%c%V%)\ %P

set scrolloff=1


" }}}
" {{{ Mappings
""""""""""""""""""""
"     MAPPINGS     "
""""""""""""""""""""

" Paste toggling - allow for pasting from other sources with correct
" formatting
set pastetoggle=<leader>p

" Disable the 'help' key
nmap K <nop>

" Clear hlsearch with enter key
nmap <enter> :nohl<cr>

" Multipurpose tab key from grb
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" delete comment character when joining commented lines
if v:version > 703 || v:version == 703 && has("patch541")
    set formatoptions+=j
endif

" Configure hlsearch
set hlsearch

" settings from thoughtbot dotfiles repo
" Swap between two files
map <leader><leader> <C-^>

" Speed up ctrl-e/ctrl-y
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" Swap the mark keys
nnoremap ' `
nnoremap ` '

" Map control-s to update, rather than write
nmap <C-s> :update<CR>
imap <C-s> :update<CR>
vmap <C-s> :update<CR>

" Change directory to that of the current file
" Taken from Dave Aitken http://www.github.com/actionshrimp
" Tweaked to run lcd instead of cd
map <leader>cd :lcd %:p:h<CR>:pwd<CR>

" Remap the Q key
map Q gqip

" Expand %% to the current directory
" http://vimcasts.org/e/14
cnoremap %% <c-r>=expand('%:h') . '/'<cr>

" Make the Y key work
map Y y$

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" disable f1 key
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Remove the arrow key functionality
nnoremap <Up> :echo "Use k!"<cr>
nnoremap <Down> :echo "Use j!"<cr>
nnoremap <Left> :echo "Use h!"<cr>
nnoremap <Right> :echo "Use l!"<cr>
inoremap <Up> <esc>:echo "Use k!"<cr>
inoremap <Down> <esc>:echo "Use j!"<cr>
inoremap <Left> <esc>:echo "Use h!"<cr>
inoremap <Right> <esc>:echo "Use l!"<cr>

" Remap the move-window keys
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Nice interface to the buffer list
nnoremap gb :buffers<cr>:b<space>

" Performance measurements
nnoremap <silent> <leader>DD :profile start /tmp/profile.log
    \ <bar> profile func *
    \ <bar> profile file * <cr>
nnoremap <silent> <leader>DQ :profile pause
    \ <bar> noautocmd qall! <cr>

" Handy saving of text if a C-u is pressed
inoremap <C-u> <C-g>u<C-u>
inoremap <C-w> <C-g>u<C-w>

" Quick file editing
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>ez :vsplit ~/.zshrc<cr>

" open Ag (note the space afterwards)
nnoremap <leader>a :Ag 

" Use space to fold/unfold
nnoremap <space> za

" }}}
" {{{ Searching

" Use silver searcher if available
if executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor
endif

" Bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" }}}
" {{{ Misc

""""""""""""""""""""
"       MISC       "
""""""""""""""""""""

" Function to source a range of lines
function! SourceRange() range
    let tmpsofile = tempname()
    call writefile(getline(a:firstline, a:lastline), l:tmpsofile)
    execute "source " . l:tmpsofile
    call delete(l:tmpsofile)
endfunction
command! -range Source <line1>,<line2>call SourceRange()

" }}}
" {{{ Colour scheme
set background=dark
colorscheme srw
"}}}
" vim: foldmethod=marker
