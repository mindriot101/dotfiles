" {{{ Plugins
""""""""""""""""""""
"     PLUGINS      "
""""""""""""""""""""

" Remap the leader key to comma
let mapleader=','

" Load all of the plugins with vundle
if filereadable(expand("~/.vim/setup/bundles.vim"))
source ~/.vim/setup/bundles.vim
endif


" Now load the plugins settings
let s:plugin_settings = expand($HOME . '/.vim/setup/plugin_settings.vim')
if filereadable(s:plugin_settings)
    exec ':source ' . s:plugin_settings
endif

" }}}
" {{{ Settings
""""""""""""""""""""
"     SETTINGS     "
""""""""""""""""""""

" turn syntax highlighting on
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
    syntax on
endif

" set up some nice tab defaults
set tabstop=8
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab
set smarttab
set shell=bash
scriptencoding utf-8

" Automatically save on certain commands
set autowrite

" Shorten the paren matching flash time
set matchtime=3

" Set history settings
set history=1000
set undolevels=700

" reload all file changes automatically
set autoread

" set incremental search
set incsearch

" set case options for searching
set ignorecase
set smartcase

" show command as it's typed
set showcmd

" nice file formatting
set autoindent
set smartindent
set cindent

" always have status line on
set laststatus=2
set encoding=utf-8 " Necessary to show unicode glyphs

" make backspace behave nicely
set backspace=indent,eol,start

" Join lines with 1 space instead of 2
set nojoinspaces

" Set the tags file location
set tags=.git/tags;/

" Tell us when anything is changed via :...
set report=0

" Enable fast tty mode
set ttyfast

" Support file types in this order
set fileformats=unix,mac,dos

" Change the way tab autocompletion works
set wildmenu
set wildmode=list:longest,list:full

" Disable escape keys which makes vim more responsive
set noesckeys

" Hide buffers instead of closing them
set hidden

" Don't update the display while executing macros
set lazyredraw

" Set up statusline
set statusline=

" Folding method
set foldmethod=marker

" Thesaurus
set thesaurus+=~/thesaurus/mthesaur.txt

" Handle the splat clipboard
if has('unnamedplus')
    set clipboard=unnamedplus
endif

" source local vimrc files
set exrc
set secure

" Enable british spelling
set spelllang=en_gb

" Better formatting
set formatprg=par

" Add some lines around the cursor
set scrolloff=3

" Configure 'Press enter to continue' messages
set shortmess=atI

" Time out on key codes but not mappings
set notimeout
set ttimeout
set ttimeoutlen=100

" GRB does these
set winwidth=79

" Enable scrolljump
set scrolljump=5

" Disable conceal
set conceallevel=0

" Enable relativenumber
set relativenumber

" Enable number also to get the current line numbered, only in 7.4 and above
if version >= 704
    set number
endif

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright
set noequalalways

" Enable the ruler
set ruler

" Always show the tab line
set showtabline=2

" Set some ignore patterns
set wildignore+=*.aux,*.o,*.git,/tmp/*,*.so,*.swp,*.zip,venv,env,*.pyc

set switchbuf=useopen

" Enable auto sourcing of vim config files
augroup AutoloadVimrc
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END

" Jump back to last file position
autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \ exe "normal! g`\"" |
    \ endif

" ... unless it's a git commit
autocmd FileType gitcommit autocmd! bufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

" Highlight trailing whitespace only in normal mode
highlight ExtraWhitespace ctermbg=red guibg=red
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/

" Set the status line
set statusline=%<%f\ %h%m%r%=%y\ %-14.(%l,%c%V%)\ %P

" Show cursorline only when in normal mode
augroup cline
    autocmd!
    autocmd WinLeave,InsertEnter * set nocursorline
    autocmd WinEnter,InsertLeave * set cursorline
augroup END

" }}}
" {{{ Mappings
""""""""""""""""""""
"     MAPPINGS     "
""""""""""""""""""""

" Quick spelling toggle
nmap <silent> <leader>s :set spell!<cr>

" Paste toggling - allow for pasting from other sources with correct
" formatting
set pastetoggle=<leader>p

" Multipurpose tab key from grb
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" delete comment character when joining commented lines
if v:version > 703 || v:version == 703 && has("patch541")
    set formatoptions+=j
endif

" Configure hlsearch
set nohlsearch

" settings from thoughtbot dotfiles repo
" Swap between two files
map <leader><leader> <C-^>

" Speed up ctrl-e/ctrl-y
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" Swap the mark keys
nnoremap ' `
nnoremap ` '

" Map control-s to update, rather than write
nmap <C-s> :update<CR>
imap <C-s> :update<CR>
vmap <C-s> :update<CR>

" Change directory to that of the current file
" Taken from Dave Aitken http://www.github.com/actionshrimp
" Tweaked to run lcd instead of cd
map <leader>cd :lcd %:p:h<CR>:pwd<CR>

" Remap the Q key
map Q gq

" Expand %% to the current directory
" http://vimcasts.org/e/14
cnoremap %% <c-r>=expand('%:h') . '/'<cr>

" Make the Y key work
map Y y$

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" disable f1 key
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Remove the arrow key functionality
nnoremap <Up> :echo "Use k!"<cr>
nnoremap <Down> :echo "Use j!"<cr>
nnoremap <Left> :echo "Use h!"<cr>
nnoremap <Right> :echo "Use l!"<cr>
inoremap <Up> <esc>:echo "Use k!"<cr>
inoremap <Down> <esc>:echo "Use j!"<cr>
inoremap <Left> <esc>:echo "Use h!"<cr>
inoremap <Right> <esc>:echo "Use l!"<cr>

" Remap the move-window keys
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Nice interface to the buffer list
nnoremap gb :buffers<cr>:b<space>

" Performance measurements
nnoremap <silent> <leader>DD :profile start /tmp/profile.log
    \ <bar> profile func *
    \ <bar> profile file * <cr>
nnoremap <silent> <leader>DQ :profile pause
    \ <bar> noautocmd qall! <cr>

" Handy saving of text if a C-u is pressed
inoremap <C-u> <C-g>u<C-u>
inoremap <C-w> <C-g>u<C-w>

" }}}
" {{{ Misc

""""""""""""""""""""
"       MISC       "
""""""""""""""""""""

" Increase scrolling performance
syntax sync minlines=256

" Don't syntax highlight long lines
set synmaxcol=128

" }}}
" vim: foldmethod=marker
