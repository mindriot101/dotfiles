" {{{ Init
" Remap the leader key to comma
let mapleader=','
let maplocalleader='\\'
" }}}
" {{{ Plugins
" {{{ Vim Plug
call plug#begin('~/.vim/bundle')

" tpope plugins, these deserve their own section
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-scriptease'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-jdaddy'

" Custom plugins
Plug 'kien/ctrlp.vim'
Plug 'rking/ag.vim', { 'on': 'Ag' }
Plug 'tell-k/vim-autopep8', { 'for': 'python' }
Plug 'sheerun/vim-polyglot'
Plug 'christoomey/vim-tmux-navigator'
Plug 'sjl/gundo.vim'
Plug 'amdt/vim-niji'
Plug 'junegunn/goyo.vim'
Plug 'hylang/vim-hy'
Plug 'vim-scripts/SWIG-syntax'
Plug 'kien/rainbow_parentheses.vim'

" My plugins or forks
Plug 'mindriot101/vim-pytest-runner', { 'for': 'python' }

call plug#end()
" }}}
" Plugin settings {{{
" {{{ matchit
runtime macros/matchit.vim
"}}}
" {{{ ctrlp
map <leader>f :CtrlP<cr>
map <leader>b :CtrlPBuffer<cr>
let g:ctrlp_map = "<leader>f"

" Always open file in new buffer
let g:ctrlp_switch_buffer = 0

" Use current working directory always
let g:ctrlp_working_path_mode = 0

" Open new files with <c-y> in same window
let g:ctrlp_open_new_file = 'r'

" Use silver searcher if available
if executable('ag')
    " Let ctrlp use ag for files
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

    " Follow symlinks but not duplicates
    let g:ctrlp_follow_symlinks = 1

    " Change ctrlp style
    let g:ctrlp_match_window = 'bottom,order:btt'

    " Only remember a limited number of files
    let g:ctrlp_mruf_max = 0

    " Disable ag caching
    let g:ctrlp_use_caching = 0
endif

let g:ctrlp_custom_ignore = '\v\~$|\.(o|swp|pyc|wav|mp3|ogg|blend)$|(^|[/\\])\.(hg|git|bzr)($|[/\\])|venv/*'
"}}}
" {{{ markdown-folding
let g:markdown_fold_style = 'stacked'
"}}}
" {{{ vim-pytest-runner
augroup PythonTestRunner
    autocmd!
    autocmd Filetype python nmap <leader>ra :call RunAllTests()<cr>
    autocmd Filetype python nmap <leader>rc :call RunNearestTest()<cr>
    autocmd Filetype python nmap <leader>rf :call RunCurrentTestFile()<cr>
    autocmd Filetype python nmap <leader>rl :call RunLastTest()<cr>
    autocmd Filetype python let g:pytest_test_regexp = '\v\s*(.*def)\s+test_'
    autocmd Filetype python let g:pytest_command = "!py.test -x {test} -m 'not wip'"
augroup END
"}}}
" {{{ git-gutter
" remove git gutter key mappings
let g:gitgutter_map_keys = 0

" Speed ups
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0
"}}}
" {{{ vim-tmuxify
let g:tmuxify_run = {
    \ "python": "python %",
    \ "bash": "bash %",
\}
"}}}
" {{{ tslime
" Mappings
vmap <C-c><C-c> <Plug>SendSelectionToTmux
nmap <C-c><C-c> <Plug>NormalModeSendToTmux
nmap <C-c>r <Plug>SetTmuxVars
"}}}
" {{{ vim-autopep8
" Mappings
autocmd FileType python map <buffer> <leader>y :call Autopep8()<cr>
let g:autopep8_disable_show_diff=1
let g:autopep8_max_line_length=99
"}}}
" {{{ gundo
let g:gundo_preview_bottom = 1
map <leader>G :GundoToggle<cr>
"}}}
" {{{ goyo
let g:goyo_width = 100

" Goyo callbacks
function! s:goyo_enter()
    if has('gui_running')
        set background=light
        colorscheme solarized
    endif
endfunction

function! s:goyo_leave()
    if has('gui_running')
        set background=dark
        colorscheme grb256
    endif
endfunction

autocmd User GoyoEnter nested call <SID>goyo_enter()
autocmd User GoyoLeave nested call <SID>goyo_leave()
"}}}
" {{{ rainbow-parentheses
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
"}}}
"}}}
" }}}
" {{{ Settings
""""""""""""""""""""
"     SETTINGS     "
""""""""""""""""""""

" turn syntax highlighting on
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
    syntax on
endif

" set up some nice tab defaults
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab
set smarttab
set shell=bash
scriptencoding utf-8

" Increase encryption protection
if v:version > 704
set cryptmethod=blowfish2
endif

" Line numbering
set norelativenumber
set nonumber

" Use hlsearch
set hlsearch
nmap <space> :nohlsearch<cr>

" Do not use more prompt
set nomore

" Automatically save on certain commands
set autowrite

" Update shell
let g:is_posix = 1

" Shorten the paren matching flash time
set matchtime=3

" Set history settings
set history=250
set undolevels=100

" Do not jump to the start of line when indenting
set nostartofline

" reload all file changes automatically
set autoread

" set incremental search
set incsearch

" set case options for searching
set ignorecase
set smartcase

" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

" From Steve Losh
" iTerm2 is currently slow as ball at rendering the nice unicode lines, so for now I'll just use ascii pipes.  They're ugly but at least I won't want to kill myself when trying to move around a file.
set fillchars=diff:⣿,vert:│
set fillchars=diff:⣿,vert:\|

" show command as it's typed
set showcmd

" nice file formatting
set autoindent
set smartindent
set cindent

" Always show the status bar
set laststatus=2

" Necessary to show unicode glyphs
set encoding=utf-8

" make backspace behave nicely
set backspace=indent,eol,start

" Join lines with 1 space instead of 2
set nojoinspaces

" Disable all bells
set novisualbell
set noerrorbells
set t_vb=

" Set the tags file location
set tags=.git/tags,tags;/

" Tell us when anything is changed via :...
set report=0

" Enable fast tty mode
set ttyfast

" Enable folding
set foldenable

" Support file types in this order
set fileformats=unix,mac,dos

" Change the way tab autocompletion works
set wildmenu
set wildmode=longest,list:longest

" Disable escape keys which makes vim more responsive
set noesckeys

" Hide buffers instead of closing them
set hidden

" Don't update the display while executing macros
set lazyredraw

" Match parens when highlighting them
set showmatch

" Thesaurus
set thesaurus+=~/thesaurus/mthesaur.txt

" Handle the splat clipboard
if has('unnamedplus')
    set clipboard=unnamedplus
endif

" source local vimrc files
set exrc
set secure

" Enable british spelling
set spelllang=en_gb

" Better formatting
set formatprg=par

" Configure 'Press enter to continue' messages
set shortmess=atI

" Time out on key codes but not mappings
set notimeout
set ttimeout
set ttimeoutlen=1
set timeoutlen=500

set nobackup
set backupskip=/tmp/*,/private/tmp/*
set writebackup
set undofile
set undodir=~/.vim/tmp/undo

" GRB does these
set winwidth=79

" Enable scrolljump
set scrolljump=10

" Disable conceal
set conceallevel=0

" Open new split panes to bottom, which feels more natural
set splitbelow
set noequalalways

" Enable the ruler
set ruler

" Only show the tab line if multiple tabs
set showtabline=1

" Set some ignore patterns
set wildignore+=*.aux,*.o,*.git,/tmp/*,*.so,*.swp,*.zip,venv,env,*.pyc

set switchbuf=useopen

" Enable auto sourcing of vim config files
augroup AutoloadVimrc
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
    autocmd BufWritePost ~/dotfiles/vim/vimrc source ~/dotfiles/vim/vimrc
augroup END

" Jump back to last file position
autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \ exe "normal! g`\"" |
    \ endif

" ... unless it's a git commit
autocmd FileType gitcommit autocmd! bufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

" Highlight trailing whitespace only in normal mode
highlight ExtraWhitespace ctermbg=red guibg=red
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/

set scrolloff=1

" Nicer netrw style
let g:netrw_liststyle = 3

" }}}
" {{{ Statusline

" Set up statusline
set statusline=

" Buffer number and pipe character with spaces
set statusline+=%-3.3n\ 

" Filename relative to opening path
set statusline+=%f\ 

" Status markers
set statusline+=%h%m%r%q

" End of left section, start right section
set statusline+=%=

" File type
set statusline+=%y\ 

" Cursor position
set statusline+=%-14.(%l,%c%V%)\ 

" View position
set statusline+=%P


" }}}
" {{{ Mappings
""""""""""""""""""""
"     MAPPINGS     "
""""""""""""""""""""

" Some common leader mappings
nnoremap <leader>w :update<cr>

" Paste toggling - allow for pasting from other sources with correct
" formatting
set pastetoggle=<leader>p

" Disable the 'help' key
nnoremap K <nop>

" Make line based movement more sane
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k
vnoremap j gj
vnoremap k gk
vnoremap gj j
vnoremap gk k

" Mapping for closing all windows but this one
nnoremap <leader>o :only<cr>

" Multipurpose tab key from grb
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" delete comment character when joining commented lines
if v:version > 703 || v:version == 703 && has("patch541")
    set formatoptions+=j
endif

" settings from thoughtbot dotfiles repo
" Swap between two files
noremap <leader><leader> <C-^>

" Speed up ctrl-e/ctrl-y
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" Swap the mark keys
nnoremap ' `
nnoremap ` '

" Map control-s to update, rather than write
nnoremap <C-s> :update<CR>
inoremap <C-s> :update<CR>
vnoremap <C-s> :update<CR>

" Change directory to that of the current file
" Taken from Dave Aitken http://www.github.com/actionshrimp
" Tweaked to run lcd instead of cd
noremap <leader>cd :lcd %:p:h<CR>:pwd<CR>

" Remap the Q key
noremap Q gqip

" Expand %% to the current directory
" http://vimcasts.org/e/14
cnoremap %% <c-r>=expand('%:h') . '/'<cr>

" Make the Y key work
noremap Y y$

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" disable f1 key
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Remove the arrow key functionality
nnoremap <Up> :echo "Use k!"<cr>
nnoremap <Down> :echo "Use j!"<cr>
nnoremap <Left> :echo "Use h!"<cr>
nnoremap <Right> :echo "Use l!"<cr>
inoremap <Up> <esc>:echo "Use k!"<cr>
inoremap <Down> <esc>:echo "Use j!"<cr>
inoremap <Left> <esc>:echo "Use h!"<cr>
inoremap <Right> <esc>:echo "Use l!"<cr>

" Remap the move-window keys
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" Nice interface to the buffer list
nnoremap gb :buffers<cr>:b<space>

" Performance measurements
nnoremap <silent> <leader>DD :profile start /tmp/profile.log
    \ <bar> profile func *
    \ <bar> profile file * <cr>
nnoremap <silent> <leader>DQ :profile pause
    \ <bar> noautocmd qall! <cr>

" Handy saving of text if a C-u is pressed
inoremap <C-u> <C-g>u<C-u>
inoremap <C-w> <C-g>u<C-w>

" Quick file editing
nnoremap <leader>ev :e $MYVIMRC<cr>
nnoremap <leader>ez :e ~/.zshrc<cr>

" open Ag (note the space afterwards)
nnoremap <leader>a :Ag --ignore "*tags" 

" Default leader mapping to run current file,
" with eunuch.vim this should basically work
" once a shebang is in place
noremap <leader>t :update\|!./%<cr>

" }}}
" {{{ Searching
" }}}
" {{{ Misc

""""""""""""""""""""
"       MISC       "
""""""""""""""""""""

" Strip trailing whitespace
" http://stackoverflow.com/a/1618401/56711
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

autocmd Filetype c,cpp,ruby,python autocmd BufWritePre :call <SID>StripTrailingWhitespaces()

" Disable syntax highlighting when opening a large file
autocmd BufReadPre * if getfsize(expand("%")) > 10000000 | syntax clear | endif



" }}}
" {{{ Colour scheme
colorscheme grb256

" Make it more obvious which paren I'm on
hi MatchParen cterm=none ctermbg=black ctermfg=yellow

" Overwrite the CursorLine colour from grb256 to the origial ir_black colour
" to make errors show up correctly
hi CursorLine     guifg=NONE        guibg=#121212     gui=NONE      ctermfg=NONE        ctermbg=NONE        cterm=BOLD

" Make git gutterline black background
hi SignColumn ctermbg=none

" Cursorline and only show it in the active buffer
set cursorline
autocmd WinEnter * setlocal cursorline
autocmd WinLeave * setlocal nocursorline
"}}}
" vim: foldmethod=marker
